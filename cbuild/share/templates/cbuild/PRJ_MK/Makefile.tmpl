% PNAME=${PRJ_NAME^^}
% PNAME=${PNAME//-/_}
% if [[ $CPKG_OS == "Linux" ]]; then
MAKEFLAGS=--no-print-directory
% fi
PROJECT_NAME=%{ $PRJ_NAME }%
PROJECT_VERSION=%{ $PKG_VER }%
PACKAGE_NAME=%{ $PKG_NAME }%
GCOV=%{ $CB_GCOV }%
BASEDIR=$(shell pwd)
PRJ_BINDIR=%{ $PRJ_BINDIR }%
% if (($CB_CPUS > 1)); then
CB_JOBS=-j%{ $CB_CPUS }%
% else
CB_JOBS=
% fi

all: build-project

build-project:
	@$(MAKE) $(CB_JOBS) -C build

% declare -a BIN_TARGETS=()
%
% for TARGET in ${PRJ_BINS[@]}; do
%     TARGET=bin_${TARGET}
%     BIN_TARGETS+=($TARGET)
%{ $TARGET }%:
	@$(MAKE) $(CB_JOBS) -C build %{ $TARGET }%

% done

binaries: %{ ${BIN_TARGETS[@]} }%

% declare -a LIB_TARGETS=()
%
% for TARGET in ${PRJ_LIBS[@]}; do
%     if [[ "${HLIB_TARGET_MAP[$TARGET]}" ]]; then
%         continue
%     fi
%
%     TARGET=lib_${TARGET}
%     LIB_TARGETS+=($TARGET)
%{ $TARGET }%:
	@$(MAKE) $(CB_JOBS) -C build %{ $TARGET }%

% done

libraries: %{ ${LIB_TARGETS[@]} }%

% declare -a PLUG_TARGETS=()
%
% for TARGET in ${PRJ_PLUGS[@]}; do
%     TARGET=plug_${TARGET}
%     PLUG_TARGETS+=($TARGET)
%{ $TARGET }%:
	@$(MAKE) $(CB_JOBS) -C build %{ $TARGET }%

% done

plugins: %{ ${PLUG_TARGETS[@]} }%

% declare -a TST_TARGETS=()
%
% for TARGET in ${PRJ_TSTS[@]}; do
%     TARGET=tst_${TARGET}
%     TST_TARGETS+=($TARGET)
%{ $TARGET }%:
	@$(MAKE) $(CB_JOBS) -C build %{ $TARGET }%

% done

tests: %{ ${TST_TARGETS[@]} }%

test: tests
	@cd build && env PRJ_BINDIR=$(PRJ_BINDIR) prove -r -m -e '' t

test-verbose: tests
	@cd build && env PRJ_BINDIR=$(PRJ_BINDIR) prove -v -r -m -e '' t

test-report: tests
	@mkdir -p build/quality-reports/tests
	@cd build && env PRJ_BINDIR=$(PRJ_BINDIR) prove \
	    -v -r -m -e '' \
	    -P HTML=outfile:quality-reports/tests/index.html,force_inline_css:1,force_inline_js:1 \
	    t || true

test-report-jenkins: tests
	@rm -rf build/tap-reports
	@mkdir -p build/tap-reports
	@echo "building TAP reports"
	@cd build && for T in t/*.t; do \
		env PRJ_BINDIR=$(PRJ_BINDIR) prove \
			-v -m -e '' $$T | \
		tee tap-reports/`basename $$T .t`.tap; \
	done

coverage-report:
	@rm -rf build/coverage
	@mkdir -p build/coverage
	@echo "building HTML coverage report"

	@cd build && ( \
		gcovr \
			-e '/usr/include.*' \
			-e '.*/build/include\.generated/.*' \
			-e '.*/sources/tests/.*' \
			--html --html-details \
			-o coverage/index.html \
	    ; \
	    sed -i"" -r -e 's,>[^<]+/sources/,>,g' coverage/*.html \
	)

coverage-report-jenkins:
	@rm -rf build/coverage
	@mkdir -p build/coverage
	@echo "building XML coverage report (Jenkins)"

	@cd build && ( \
		gcovr \
			-e '/usr/include.*' \
			-e '.*/build/include\.generated/.*' \
			-e '.*/sources/tests/.*' \
			--xml \
			-o coverage/coverage.xml \
	)

doc:
	@cd build/doc && ( \
		doxygen 2> doxygen.log; \
		find \
		    . \
		    -type f \
		| xargs grep -l %{ ${PNAME} }%_API \
		| while read F; do \
		    sed -i"" -e "s/%{ ${PNAME} }%_API *//g" $$F; \
		done; \
	)

% if (($CPKG_IS_DEB)); then
package: build-project
	@cd build && ( \
		rm -rf *.deb *.changes *.upload; \
		find \
		    packaging \
		    -mindepth 1 \
		    -maxdepth 1 \
		    -type d \
		    \! -name debian \
		    -print0 | xargs -0 rm -rf; \
		make DESTDIR=packaging install | grep -v '^-- '; \
		cd packaging && dpkg-buildpackage -b -uc \
	)
% elif (($CPKG_IS_PKGSRC)); then
package:
	@rsync -aq build/packaging/ %{ $PKGSRC_DIR/$PKG_CAT/$PKG_NAME/ }%
	@cd %{ $PKGSRC_DIR/$PKG_CAT/$PKG_NAME/ }% && ( \
		sudo -- $(SHELL) -c " \
		    bmake distclean && \
		    bmake fetch && \
		    bmake mdi && \
		    bmake && \
		    bmake stage-install CHECK_FILES=no && \
		    bmake print-PLIST > PLIST && \
		    bmake install-clean && \
		    bmake package \
		" \
	)
% fi

update-pkg: package
% if (($CPKG_IS_DEB)); then
	@sudo dpkg -i build/*.deb
% elif (($CPKG_IS_PKGSRC)); then
	@sudo -- $(SHELL) -c  " \
	    pkg_add \
	        -U \
	        %{ $PKGSRC_DIR/packages/All/${PKG_NAME}-${PKG_VER}.tgz }% \
	"
% fi

install:
	@cd build && (make DESTDIR=$(DESTDIR) install | grep -v '^-- ')

% if (($CPKG_IS_DEB)); then
upload:
	@cd build && dput *.changes
% fi

clean:
	@cd build && make clean

distclean: clean
	@rm -rf build .cbuild Makefile
